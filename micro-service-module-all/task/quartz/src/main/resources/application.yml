spring:
  task:

  application:
    name: quartz-module
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/quartz?useSSL=false&serverTimezone=UTC
    username: root
    password: root
    driver-class-name: com.mysql.cj.jdbc.Driver
    max-active: 1000
    max-idle: 20
    min-idle: 5
    initial-size: 10
  

  #org:quartz:dataSource.quartzDataSource.driver: ${  datasource:driver-class-name}
  #org:quartz:dataSource.quartzDataSource.URL: ${  datasource:url}
  #org:quartz:dataSource.quartzDataSource.user: ${  datasource:username}
  #org:quartz:dataSource.quartzDataSource.password: ${  datasource:password}
  
  # 是否使用properties作为数据存储
org:
  quartz:
    jobStore:
      useProperties: false
      # 数据库中表的命名前缀
      tablePrefix: QRTZ_
      # 是否是一个集群，是不是分布式的任务
      isClustered: true
      # 集群检查周期，单位为毫秒，可以自定义缩短时间。当某一个节点宕机的时候，其他节点等待多久后开始执行任务
      clusterCheckinInterval: 5000
      # 单位为毫秒，集群中的节点退出后，再次检查进入的时间间隔
      misfireThreshold: 60000
      # 事务隔离级别
      txIsolationLevelReadCommitted: true
      # 存储的事务管理类型
      #      class: org:quartz:impl.jdbcjobstore.JobStoreTX
      class: org:springframework.scheduling.quartz.LocalDataSourceJobStore
      # 使用的Delegate类型
      driverDelegateClass: org:quartz:impl.jdbcjobstore.StdJDBCDelegate
    #      dataSource: quartzDataSource
    # 集群的命名，一个集群要有相同的命名
    scheduler:
      instanceName: ClusterQuartz
      # 节点的命名，可以自定义。AUTO代表自动生成
      instanceId: AUTO
      # rmi远程协议是否发布
      rmi.export: false
      # rmi远程协议代理是否创建
      rmi.proxy: false
      # 是否使用用户控制的事务环境触发执行任务
      wrapJobExecutionInUserTransaction: false