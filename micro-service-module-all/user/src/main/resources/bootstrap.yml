server:
  port: 11030
  servlet:
    context-path: /${spring.application.name}

spring:
  application:
    name: user
  profiles:
    active: @spring.profiles.active@
  main:
    allow-bean-definition-overriding: true
    #防止循环依赖
    allow-circular-references: true
  cloud:
    nacos:
      discovery:
        service: ${spring.application.name}

  #====================================================================================================================================
  datasource:
    dynamic:
      # 开启seata代理
      seata: ${seata.enabled}

# seata配置
seata:
  enabled: true
  # Seata 应用编号，默认为 ${spring.application.name}
  #application-id: seata-server
  # Seata 事务组编号，用于 TC 集群名
  tx-service-group: default_tx_group
  #tx-service-group: ${spring.application.name}-group
  # 关闭自动代理
  enable-auto-data-source-proxy: false
  # 服务配置项
  service:
    grouplist:
      default: 127.0.0.1:8091
    # 虚拟组和分组的映射
    vgroup-mapping:
      default_tx_group: default
      #ruoyi-system-group: default
      # 分组和 Seata 服务的映射
      # grouplist:  # 仅注册中心为file时使用
      # default: 127.0.0.1:8091
  registry:
    type: nacos
    nacos:
      server-addr: ${nacos.discovery.server-addr}
      group: ${seata-server.discovery.group}
      namespace: ${seata-server.discovery.namespace}
  config:
    type: nacos
    nacos:
      server-addr: ${nacos.config.server-addr}
      group: ${seata-server.config.group}
      namespace: ${seata-server.config.namespace}
#====================================================================================================================================
# OpenFeign 配置

# OpenFeign默认使用jdk自带的HttpURLConnection，
#我们知道HttpURLConnection没有连接池、性能和效率比较低，如果采用默认，很可能会遇到性能问题导致系统故障
# OkHttpClient
feign:
  okhttp:
    enabled: true
  #OpenFeign可以设置超时时间，简单粗暴，设置一个全局的超时时间。如果不配置超时时间，默认是连接超时10s，读超时60s
  client:
    config:
      default:
        connectTimeout: 2000
        readTimeout: 60000
  #上文所述，对单个服务设置超时时间。
  #feign.client.config.serviceA.connectTimeout=2000
  #feign.client.config.serviceA.readTimeout=60000
  # 开启熔断
  hystrix:
    enabled: true
#通过OpenFeign作为注册中心的客户端时，
# 默认使用Ribbon做负载均衡，Ribbon默认也是用jdk自带的HttpURLConnection，
# 需要给Ribbon也设置一个Http client，比如使用okhttp，在properties文件中增加下面配置
ribbon:
  okhttp:
    enabled: true
  #====================================================================================================================================

#关闭security默认过滤器
security:
  ignored: none

knife4j:
  #  cors: true
  #  enable: true
  setting:
    enable-dynamic-parameter: true
  #是否开启swagger登录验证
  basic:
    #enable: false
    username: root
    password: root

springdoc:
  api-docs:
    path: /v3/api-docs
  open:
    default-group-configs:
      enable: true
  group-configs:
    #    - group: "api"
    #      paths-to-match: "/api/**"
    #    - group: "jwt"
    #      paths-to-match: "/jwt/**"
    - group: "test"
      paths-to-match:
        - "/test/**"
  swagger-ui:
    operations-sorter: alpha
    path: /swagger-ui.html
    tags-sorter: alpha

mybatis-plus:
  # 设置Mapper文件位置
  mapper-locations: classpath:mapper/*.xml, classpath:mapper/**/*.xml
  #配置
  configuration:
    # 使用JDBC的getGeneratedKeys，获取数据库自增主键值
    use-generated-keys: true
    # 使用列别名
    use-column-label: true
    # 驼峰下划线转换
    map-underscore-to-camel-case: true
#logstash:
#  addr: 127.0.0.1:4560

logging:
  # 日志文件
  #  file:
  #    name: var/log/${spring.application.name}/${spring.profiles.active}/${spring.application.name}0.log
  # 日志等级
  level:
    root: info

captcha:
  enabled: true
cors:
  config: false
  filter: true
  pattern: "/**"
  allowedOrigin:
  allowedOriginPattern: "*"
  allowedMethods: "GET,POST,PUT,DELETE,OPTIONS"
  allowedHeader: "*"
  allowCredentials: true
  maxAge: 360000
authorization:
  shiro:
    enable: true
  security:
    enable: false