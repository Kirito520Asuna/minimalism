knife4j:
  cors: true
  enable: true
  #是否开启swagger登录验证
  basic:
    enable: false

netty:
  port: 8004
  maxContentLength: 8192
  websocketPath: "/ws"
  subprotocols: "WebSocket"
  allowExtensions: true
  maxFrameSize: 655360

jwt:
  tokenHeader: Authorization
  secret: eiorjeowijfioewjfdksjfoisd
  expiration: 1800000
  tokenHead: Bearer
  mapName: user

spring:
  #redis
  redis:
    host: 127.0.0.1
  data:
    #redis
    redis:
      host: 127.0.0.1
  # Spring Redis Cache
  cache:
    # 设置缓存类型，这里使用Redis作为缓存服务器
    type: redis
    # 定义cache名称，用于在缓存注解中引用，多个名称可以使用逗号分隔
    cache-names: redisCache
    redis:
      # 允许保存空值
      cache-null-values: true
      # 自定义缓存前缀
      #key-prefix:
      # 是否使用前缀
      use-key-prefix: true
      # 设置缓存失效时间，0或者默认为永远不失效
      time-to-live: 0

  autoconfigure:
    exclude: com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure  #去除druid配置
  datasource:
    dynamic:
      primary: im #设置默认的数据源或者数据源组,默认值即为master
      strict: false #设置严格模式,默认false不启动. 启动后在未匹配到指定数据源时候回抛出异常,不启动会使用默认数据源.
      datasource:
        im:
          url: jdbc:mysql://127.0.0.1:3306/im?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&tinyInt1isBit=false
          username: root
          password: root
          type: com.alibaba.druid.pool.DruidDataSource
          driver-class-name: com.mysql.cj.jdbc.Driver
        master:
          url: jdbc:mysql://127.0.0.1:3306/master?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&tinyInt1isBit=false
          username: root
          password: root
          type: com.alibaba.druid.pool.DruidDataSource
          driver-class-name: com.mysql.cj.jdbc.Driver
      druid:
        # 初始化连接数
        initialSize: 10
        # 最小连接池数量
        minIdle: 20
        # 最大连接池数量
        maxActive: 100
        # 配置连接等待超时的时间，单位为毫秒
        maxWait: 60000
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        timeBetweenEvictionRunsMillis: 60000
        # 配置一个连接在池中最小生存的时间，单位是毫秒
        minEvictionIdleTimeMillis: 300000
        # 配置一个连接在池中最大生存的时间，单位是毫秒
        maxEvictionIdleTimeMillis: 900000
        # 配置检测连接是否有效
        validationQuery: SELECT 1 FROM DUAL
        # testOnBorrow 能够确保我们每次都能获取到可用的连接，但是如果设置为 true，则每次获取连接时候都要到数据库验证连接有效性，这在高并发的时候会造成性能下降，
        # 可以将 testOnBorrow 设置成 false，testWhileIdle 设置成 true 这样能获得比较好的性能
        testWhileIdle: true
        testOnBorrow: false
        # testOnBorrow 和 testOnReturn 在生产环境一般是不开启的，主要是性能考虑。
        testOnRetrun: false

