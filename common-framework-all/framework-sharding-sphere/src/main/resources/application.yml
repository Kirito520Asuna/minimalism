spring:
  main:
    allow-circular-references: true
    allow-bean-definition-overriding: true #当遇到同样名字的时候，是否允许覆盖注册
####################################################################################################################################################################
  autoconfigure:
    exclude: com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure  #去除druid配置
  datasource:
####################################################################################################################################################################
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      filter:
        stat:
          enabled: true
      stat-view-servlet:
        enabled: true
        loginUsername: admin
        loginPassword: 123456
      web-stat-filter:
        enabled: true
    dynamic:
      druid:
        # 初始化连接数
        initialSize: 10
        # 最小连接池数量
        minIdle: 20
        # 最大连接池数量
        maxActive: 100
        # 配置连接等待超时的时间，单位为毫秒
        maxWait: 60000
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        timeBetweenEvictionRunsMillis: 60000
        # 配置一个连接在池中最小生存的时间，单位是毫秒
        minEvictionIdleTimeMillis: 300000
        # 配置一个连接在池中最大生存的时间，单位是毫秒
        maxEvictionIdleTimeMillis: 900000
        # 配置检测连接是否有效
        validationQuery: SELECT 1 FROM DUAL
        # testOnBorrow 能够确保我们每次都能获取到可用的连接，但是如果设置为 true，则每次获取连接时候都要到数据库验证连接有效性，这在高并发的时候会造成性能下降，
        # 可以将 testOnBorrow 设置成 false，testWhileIdle 设置成 true 这样能获得比较好的性能
        testWhileIdle: true
        testOnBorrow: false
        # testOnBorrow 和 testOnReturn 在生产环境一般是不开启的，主要是性能考虑。
        testOnRetrun: false
####################################################################################################################################################################
  # sharding-sphere 数据源 公共配置
  shardingsphere:
    datasource:
      common:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        initial-size: ${spring.datasource.dynamic.druid.initialSize}
        min-idle: ${spring.datasource.dynamic.druid.minIdle}
        maxActive: ${spring.datasource.dynamic.druid.maxActive}
        # 配置获取连接等待超时的时间
        maxWait: ${spring.datasource.dynamic.druid.maxWait}
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        timeBetweenEvictionRunsMillis: ${spring.datasource.dynamic.druid.timeBetweenEvictionRunsMillis}
        # 配置一个连接在池中最小生存的时间，单位是毫秒
        minEvictableIdleTimeMillis: ${spring.datasource.dynamic.druid.minEvictionIdleTimeMillis}
        #Oracle需要打开注释
        #validationQuery: ${spring.datasource.dynamic.druid.validationQuery}
        testWhileIdle: ${spring.datasource.dynamic.druid.testWhileIdle}
        testOnBorrow: ${spring.datasource.dynamic.druid.testOnBorrow}
        testOnReturn: ${spring.datasource.dynamic.druid.testOnReturn}
        # 打开PSCache，并且指定每个连接上PSCache的大小
        poolPreparedStatements: true
        maxPoolPreparedStatementPerConnectionSize: 20
        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
        filters: stat,wall,slf4j
        # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
        connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
        wall:
          multi-statement-allow: true
#================================================================================================================================================================================
# mybatis plus 配置
#================================================================================================================================================================================
mybatis-plus:
  # 设置Mapper文件位置
  mapper-locations: classpath:mapper/*.xml, classpath:mapper/**/*.xml
  #配置
  configuration:
    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
    # 使用JDBC的getGeneratedKeys，获取数据库自增主键值
    use-generated-keys: true
    # 使用列别名
    use-column-label: true
    # 驼峰下划线转换
    map-underscore-to-camel-case: true

logging:
  level:
    com.yan.dao: debug
#================================================================================================================================================================================
sharding:
  transaction:
    seata:
      at:
        enable: true
client:
  application:
    id: archetype
  transaction:
    service:
      group: default_tx_group